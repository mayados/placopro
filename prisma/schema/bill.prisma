model Bill{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    number String @unique
    natureOfWork String
    description String
    totalHt Float
    totalTtc Float
    vatAmount Float
    issueDate DateTime
    dueDate DateTime
    paymentDate DateTime?
    // We have the user in Clerk, so we can't make a relation
    userId String?
    canceledAt DateTime?
    status String @default("draft")
    paymentMethod String?
    discountReason String?
    billType String
    // global discount (HT amount)
    discountAmount Float @default(0) 
    // Optionnal : discount in %
    // discountPercentage Float? 
    // To know if the discount comes from the Quote
    isDiscountFromQuote Boolean @default(false) 
    // Frais de déplacement
    travelCosts Float
    // Type de frais de déplacement (forfait unique / journalier...)
    travelCostsType String
      // Conditions de paiement
    paymentTerms String

	// Bill is created by a User
    // userId String? @db.ObjectId
    // user User? @relation(fields: [userId], references: [id], onDelete: SetNull)  
	// One Bill is linked to 1 Client
    clientId String @db.ObjectId
    client Client @relation(fields: [clientId], references: [id], onUpdate: Cascade, onDelete: Cascade)

    // In all cases, a Bill is linked to a WorkSite
    workSiteId String @db.ObjectId
    workSite WorkSite @relation(fields: [workSiteId], references: [id])

    // in the case where the Bill comes from a Quote
    quoteId String? @db.ObjectId
    quote Quote? @relation(fields: [quoteId], references: [id], onUpdate: Cascade, onDelete: SetNull)

	services BillService[]
    creditNotes CreditNote[]

    @@index([userId])
    @@index([clientId])
}
